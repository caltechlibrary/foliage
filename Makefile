# =============================================================================
# @file    Makefile
# @brief   Makefile for some steps in creating new releases on GitHub
# @date    2021-10-16
# @license Please see the file named LICENSE in the project directory
# @website https://github.com/caltechlibrary/foliage
# =============================================================================

.ONESHELL: 				# Run all commands in the same shell.
.SHELLFLAGS += -e			# Exit at the first error.

# Before we go any further, test if certain programs are available.
# The following is based on the approach posted by Jonathan Ben-Avraham to
# Stack Overflow in 2014 at https://stackoverflow.com/a/25668869

PROGRAMS_NEEDED = curl gh git jq sed pyinstaller pandoc inliner
TEST := $(foreach p,$(PROGRAMS_NEEDED),\
	  $(if $(shell which $(p)),_,$(error Cannot find program "$(p)")))

# Set some basic variables.  These are quick to set; we set additional
# variables using "set-vars" but only when the others are needed.

name	  := $(strip $(shell awk -F "=" '/^name/ {print $$2}' setup.cfg))
version	  := $(strip $(shell awk -F "=" '/^version/ {print $$2}' setup.cfg))
url	  := $(strip $(shell awk -F "=" '/^url/ {print $$2}' setup.cfg))
desc	  := $(strip $(shell awk -F "=" '/^description / {print $$2}' setup.cfg))
author	  := $(strip $(shell awk -F "=" '/^author / {print $$2}' setup.cfg))
email	  := $(strip $(shell awk -F "=" '/^author_email/ {print $$2}' setup.cfg))
license	  := $(strip $(shell awk -F "=" '/^license / {print $$2}' setup.cfg))
appname   := $(strip $(shell python3 -c 'print("$(name)".title()+".app")'))
platform  := $(strip $(shell python3 -c 'import sys; print(sys.platform)'))
os	  := $(subst $(platform),darwin,macos)
branch	  := $(shell git rev-parse --abbrev-ref HEAD)
initfile  := $(name)/__init__.py
distdir   := dist/$(os)
builddir  := build/$(os)
zipfile   := $(distdir)/$(name)-$(version)-$(os).zip
dmgfile   := $(distdir)/$(name)-$(version)-$(os).dmg
pagetmpl  := dev/one-page-docs/pandoc-template/template.html5
pagecss   := dev/one-page-docs/sakura-css/sakura.css
aboutfile := README.html
macreadme := dev/one-page-docs/read-me-first-macos/read-me-first.html
winreadme := dev/one-page-docs/read-me-first-windows/read-me-first.html


# Print help if no command is given ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

help:
	@echo 'Available commands:'
	@echo ''
	@echo 'make'
	@echo 'make help'
	@echo '  Print this summary of available commands.'
	@echo ''
	@echo 'make report'
	@echo '  Print variables set in this Makefile from various sources.'
	@echo '  This is useful to verify the values that have been parsed.'
	@echo ''
	@echo 'make release'
	@echo '  Do a release on GitHub. This will push changes to GitHub,'
	@echo '  open an editor to let you edit release notes, and run'
	@echo '  "gh release create" followed by "gh release upload".'
	@echo '  Note: this will NOT upload to PyPI, nor create binaries.'
	@echo ''
	@echo 'make update-doi'
	@echo '  Update the DOI inside the README.md file.'
	@echo '  This is only to be done after doing a "make release".'
	@echo ''
	@echo 'make binary'
	@echo '  Create binary using PyInstaller.'
	@echo ''
	@echo 'make packages'
	@echo '  Create the distribution files for PyPI.'
	@echo '  Do this manually to check that everything looks okay before.'
	@echo '  After doing this, do a "make test-pypi".'
	@echo ''
	@echo 'make test-pypi'
	@echo '  Upload distribution to test.pypi.org.'
	@echo '  Do this before doing "make pypi" for real.'
	@echo ''
	@echo 'make pypi'
	@echo '  Upload distribution to pypi.org.'
	@echo ''
	@echo 'make clean'
	@echo '  Clean up various files generated by this Makefile.'
	@echo ''
	@echo 'make really-clean'
	@echo '  Like "make clean", but more so.'
	@echo ''
	@echo 'make completely-clean'
	@echo '  The ultimate in cleaning.'


# Gather additional values we sometimes need ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# These variables take longer to compute, and for some actions like "make help"
# they are unnecessary and annoying to wait for.

.SILENT: vars
vars:
	$(info Gathering data -- this takes a few moments ...)
	$(eval repo	 := $(strip $(shell gh repo view | head -1 | cut -f2 -d':')))
	$(eval api_url   := https://api.github.com)
	$(eval id	 := $(shell curl -s $(api_url)/repos/$(repo) | jq '.id'))
	$(eval id_url	 := https://data.caltech.edu/badge/latestdoi/$(id))
	$(eval doi_url	 := $(shell curl -sILk $(id_url) | grep Locat | cut -f2 -d' '))
	$(eval doi	 := $(subst https://doi.org/,,$(doi_url)))
	$(eval doi_tail  := $(lastword $(subst ., ,$(doi))))
	$(info Gathering data -- this takes a few moments ... Done.)

report: vars
	@echo os	= $(os)
	@echo name	= $(name)
	@echo version	= $(version)
	@echo url	= $(url)
	@echo desc	= $(desc)
	@echo author	= $(author)
	@echo email	= $(email)
	@echo license	= $(license)
	@echo branch	= $(branch)
	@echo repo	= $(repo)
	@echo id	= $(id)
	@echo id_url	= $(id_url)
	@echo doi_url	= $(doi_url)
	@echo doi	= $(doi)
	@echo doi_tail	= $(doi_tail)
	@echo initfile  = $(initfile)
	@echo appname	= $(appname)
	@echo distdir	= $(distdir)
	@echo builddir	= $(builddir)
	@echo zipfile	= $(zipfile)


# make binary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#
# Note: the actions in this section only work on non-Windows systems. For
# building on Windows, see the file "make.bat" in this directory.

binary: | vars dist-dirs extra-files $(distdir)/$(appname) dmg

dependencies:;
	pip3 install -r requirements.txt

dist-dirs:
	-mkdir -p dist/macos dist/win

extra-files: dist-dirs $(aboutfile) $(winreadme) $(macreadme)

%.html: %.md
	pandoc --metadata title="Foliage" --template=$(pagetmpl) -c $(pagecss) -o tmp.html $<
	inliner -n < tmp.html > $@
	rm -f tmp.html

pyinstaller $(distdir)/$(appname): | vars dependencies
	@mkdir -p $(distdir)
	pyinstaller --distpath $(distdir) --clean --noconfirm pyinstaller-$(os).spec

dmg: dist-dirs $(macreadme) $(aboutfile) $(distdir)/$(appname)
	$(eval volname := Foliage_$(version))
	$(eval folder  := $(distdir)/$(volname))
	-mkdir -p $(folder)
	cp -a $(distdir)/$(appname) $(folder)
	cp -a $(aboutfile) $(folder)/ABOUT.html
	cp -a $(macreadme) $(folder)/"READ ME FIRST.html"
	hdiutil create -volname $(volname) -srcfolder $(folder) \
	    -ov -format UDZO $(abspath $(dmgfile))


# make release ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

release: | test-branch release-on-github print-instructions

test-branch: vars
ifneq ($(branch),main)
	$(error Current git branch != main. Merge changes into main first!)
endif

update-init: vars
	@sed -i .bak -e "s|^\(__version__ *=\).*|\1 '$(version)'|"  $(initfile)
	@sed -i .bak -e "s|^\(__description__ *=\).*|\1 '$(desc)'|" $(initfile)
	@sed -i .bak -e "s|^\(__url__ *=\).*|\1 '$(url)'|"	    $(initfile)
	@sed -i .bak -e "s|^\(__author__ *=\).*|\1 '$(author)'|"    $(initfile)
	@sed -i .bak -e "s|^\(__email__ *=\).*|\1 '$(email)'|"	    $(initfile)
	@sed -i .bak -e "s|^\(__license__ *=\).*|\1 '$(license)'|"  $(initfile)

update-meta: vars
	@sed -i .bak -e "/version/ s/[0-9].[0-9][0-9]*.[0-9][0-9]*/$(version)/" codemeta.json

update-citation: vars
	$(eval date  := $(shell date "+%F"))
	@sed -i .bak -e "/^date-released/ s/[0-9][0-9-]*/$(date)/" CITATION.cff
	@sed -i .bak -e "/^version/ s/[0-9].[0-9][0-9]*.[0-9][0-9]*/$(version)/" CITATION.cff

edited := codemeta.json $(initfile) CITATION.cff

commit-updates: vars
	git add $(edited)
	git diff-index --quiet HEAD $(edited) || \
	    git commit -m"Update stored version number" $(edited)

release-on-github: | vars update-init update-meta update-citation commit-updates
	$(eval tmp_file  := $(shell mktemp /tmp/release-notes-$(name).XXXX))
	git push -v --all
	git push -v --tags
	@$(info ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓)
	@$(info ┃ Write release notes in the file that gets opened in your   ┃)
	@$(info ┃ editor. Close the editor to complete the release process.  ┃)
	@$(info ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛)
	sleep 2
	$(EDITOR) $(tmp_file)
	gh release create v$(version) -t "Release $(version)" -F $(tmp_file)

print-instructions: vars
	@$(info ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓)
	@$(info ┃ Next steps:                                                ┃)
	@$(info ┃ 1. Check https://github.com/$(repo)/releases )
	@$(info ┃ 2. Wait a few seconds to let web services do their work    ┃)
	@$(info ┃ 3. Run "make update-doi" to update the DOI in README.md    ┃)
	@$(info ┃ 4. Run "make packages" & check the results                 ┃)
	@$(info ┃ 5. Run "make test-pypi" to push to test.pypi.org           ┃)
	@$(info ┃ 6. Check https://test.pypi.org/project/$(name) )
	@$(info ┃ 7. Run "make pypi" to push to pypi for real                ┃)
	@$(info ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛)

update-doi: vars
	sed -i .bak -e 's|/api/record/[0-9]\{1,\}|/api/record/$(doi_tail)|' README.md
	sed -i .bak -e 's|edu/records/[0-9]\{1,\}|edu/records/$(doi_tail)|' README.md
	sed -i .bak -e '/doi:/ s|10.22002/[0-9]\{1,\}|10.22002/$(doi_tail)|' CITATION.cff
	git add README.md CITATION.cff
	git diff-index --quiet HEAD README.md || \
	    (git commit -m"Update DOI" README.md && git push -v --all)
	git diff-index --quiet HEAD CITATION.cff || \
	    (git commit -m"Update DOI" CITATION.cff && git push -v --all)

packages: vars
	-mkdir -p $(builddir) $(distdir)
	python3 setup.py sdist --dist-dir $(distdir)
	python3 setup.py bdist_wheel --dist-dir $(distdir)
	python3 -m twine check $(distdir)/$(name)-$(version).tar.gz

# Note: for the next action to work, the repository "testpypi" needs to be
# defined in your ~/.pypirc file. Here is an example file:
#
#  [distutils]
#  index-servers =
#    pypi
#    testpypi
# 
#  [testpypi]
#  repository = https://test.pypi.org/legacy/
#  username = YourPyPIlogin
#  password = YourPyPIpassword
#
# You could copy-paste the above to ~/.pypirc, substitute your user name and
# password, and things should work after that. See the following for more info:
# https://packaging.python.org/en/latest/specifications/pypirc/

test-pypi: packages
	python3 -m twine upload --repository testpypi $(distdir)/$(name)-$(version)*.{whl,gz}

pypi: packages
	python3 -m twine upload $(distdir)/$(name)-$(version)*.{gz,whl}


# Cleanup and miscellaneous directives ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

clean: clean-dist clean-build clean-release clean-other
	@echo ✨ Cleaned! ✨

really-clean: clean really-clean-dist really-clean-build

completely-clean: really-clean
	rm -rf build dist

clean-dist: vars
	rm -fr $(distdir)/$(name) $(distdir)/$(appname) $(zipfile) \
	    dist/$(name)-$(version)-py3-none-any.whl

really-clean-dist:;
	rm -fr $(distdir)

clean-build:;
	rm -rf $(builddir)

really-clean-build:;
	rm -rf build/lib build/pyinstaller-$(os) build/bdist.*

clean-release:;
	rm -rf $(name).egg-info codemeta.json.bak $(initfile).bak README.md.bak

clean-other:;
	rm -f $(aboutfile) $(macreadme)
	rm -fr __pycache__ $(name)/__pycache__ .eggs
	rm -rf .cache

.PHONY: release release-on-github update-init update-meta update-citation \
	print-instructions packages clean test-pypi pypi extra-files dmg \
	pyinstaller

.SILENT: clean clean-dist clean-build clean-release clean-other really-clean \
	really-clean-dist really-clean-build completely-clean
